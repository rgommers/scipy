trigger:
  # start a new build for every push
  batch: False
  branches:
    include:
      - main
      - maintenance/*
  paths:
    include:
      - '*'
    exclude:
      - 'benchmarks/*'
      - './*.txt'
      - 'site.cfg.example'

pr:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

# the version of OpenBLAS used is currently 0.3.18
# and should be updated to match scipy-wheels as appropriate
variables:
    CCACHE_DIR: $(Pipeline.Workspace)/ccache
    SCIPY_AVAILABLE_MEM: 3G
    CCACHE_COMPRESS: 1
    # Using a single thread can actually speed up some computations
    OPENBLAS_NUM_THREADS: 1
    WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/18680/w_HPCKit_p_2022.2.0.173_offline.exe
    WINDOWS_FORTRAN_COMPONENTS: intel.oneapi.win.ifort-compiler

stages:

- stage: Main
  variables:
    AZURE_CI: 'true'
  jobs:
  - job: Windows
    pool:
      vmImage: 'windows-2019'
    variables:
      PKG_CONFIG_PATH: 'c:\opt\openblas\if_32\64\lib\pkgconfig'
    strategy:
      maxParallel: 1
      matrix:
          Python39-64bit-fast:
            ifort: true
            PYTHON_VERSION: '3.9'
            PYTHON_ARCH: 'x64'
            TEST_MODE: fast
            BITS: 64
            SCIPY_USE_PYTHRAN: 0
    steps:
    - task: Cache@2
      inputs:
        path: C:\Program Files (x86)\Intel\oneAPI
        key: '"install" | "$(WINDOWS_HPCKIT_URL)" | "$(WINDOWS_FORTRAN_COMPONENTS)" | "compiler" | ci/intel-oneapi/cache_exclude_windows.sh'
        cacheHitVar: CACHE_RESTORED
      condition: eq(variables.ifort, 'true')
    - script: ci/intel-oneapi/install_windows.bat $(WINDOWS_HPCKIT_URL) $(WINDOWS_FORTRAN_COMPONENTS)
      displayName: install ifort
      condition: and(ne(variables.CACHE_RESTORED, 'true'), eq(variables.ifort, 'true'))
    - bash: ci/intel-oneapi/cache_exclude_windows.sh
      displayName: exclude unused files from cache
      condition: and(ne(variables.CACHE_RESTORED, 'true'), eq(variables.ifort, 'true'))
    - task: BatchScript@1
      displayName: insert ifort into environment
      inputs:
        filename: ci/intel-oneapi/activate_windows.bat
        arguments: vs2019
        modifyEnvironment: True
      condition: eq(variables.ifort, 'true')

    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(PYTHON_VERSION)
        addToPath: true
        architecture: $(PYTHON_ARCH)
    - script: |
        git submodule update --init
      displayName: 'Fetch submodules'
    - script: |
        python -m pip install --upgrade pip
      displayName: 'Upgrade pip'
    - script: |
        choco install -y llvm
        set PATH=C:\Program Files\LLVM\bin;%PATH%
        echo '##vso[task.setvariable variable=PATH]%PATH%'
      displayName: 'Install clang-cl'
    - script: |
        clang-cl.exe --version
      displayName: 'clang-cl version'
    - script: |
        choco install -y pkgconfiglite
        choco install -y unzip
        choco install -y wget
        wget https://github.com/scipy/scipy-ci-artifacts/raw/main/openblas_32_if.zip
        unzip -d c:\ openblas_32_if.zip
      displayName: 'install pkg-config and OpenBLAS'
    - script: >-
        python -m pip install
        numpy==1.23.2
        pytest
        pytest-env
        pytest-timeout
        pytest-xdist
        threadpoolctl
        pooch
      displayName: 'Install test dependencies'
    - powershell: |
        # Use build isolation; tests all dependencies in pyproject.toml
        python -m pip install .
      displayName: 'Build SciPy'
    - powershell: |
        cd ..
        python -c "import scipy; scipy.test()"
      displayName: 'Test SciPy'
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        failTaskOnFailedTests: true
        testRunTitle: 'Publish test results'
