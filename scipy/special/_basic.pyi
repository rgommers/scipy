from __future__ import annotations

from typing import (
    Callable,
    overload,
    Literal,
)

from ._ufuncs import psi
from numpy import sinc as sinc

from numpy.typing import NDArray

from scipy._lib._util import DecimalNumber, IntNumber

_ComplexNumber = DecimalNumber | complex

_PointsDerivate = tuple[NDArray, NDArray]
_ZerosOrder = tuple[NDArray, NDArray, NDArray, NDArray]

__all__ = [
    "ai_zeros",
    "assoc_laguerre",
    "bei_zeros",
    "beip_zeros",
    "ber_zeros",
    "bernoulli",
    "berp_zeros",
    "bi_zeros",
    "clpmn",
    "comb",
    "digamma",
    "diric",
    "erf_zeros",
    "euler",
    "factorial",
    "factorial2",
    "factorialk",
    "fresnel_zeros",
    "fresnelc_zeros",
    "fresnels_zeros",
    "h1vp",
    "h2vp",
    "ivp",
    "jn_zeros",
    "jnjnp_zeros",
    "jnp_zeros",
    "jnyn_zeros",
    "jvp",
    "kei_zeros",
    "keip_zeros",
    "kelvin_zeros",
    "ker_zeros",
    "kerp_zeros",
    "kvp",
    "lmbda",
    "lpmn",
    "lpn",
    "lqmn",
    "lqn",
    "mathieu_even_coef",
    "mathieu_odd_coef",
    "obl_cv_seq",
    "pbdn_seq",
    "pbdv_seq",
    "pbvv_seq",
    "perm",
    "polygamma",
    "pro_cv_seq",
    "riccati_jn",
    "riccati_yn",
    "sinc",
    "stirling2",
    "y0_zeros",
    "y1_zeros",
    "y1p_zeros",
    "yn_zeros",
    "ynp_zeros",
    "yvp",
    "zeta",
]

_FACTORIALK_LIMITS_64BITS: dict[int, int]
_FACTORIALK_LIMITS_32BITS: dict[int, int]

digamma = psi

def diric(x: NDArray, n: DecimalNumber) -> NDArray: ...
def jnjnp_zeros(nt: int) -> _ZerosOrder: ...
def jnyn_zeros(n: int, nt: int) -> _ZerosOrder: ...
def jn_zeros(n: int, nt: int) -> NDArray: ...
def jnp_zeros(n: int, nt: int) -> NDArray: ...
def yn_zeros(n: int, nt: int) -> NDArray: ...
def ynp_zeros(n: int, nt: int) -> NDArray: ...
def y0_zeros(nt: int, complex: Literal[False] = ...) -> _PointsDerivate: ...
def y1_zeros(nt: int, complex: Literal[False] = ...) -> _PointsDerivate: ...
def y1p_zeros(nt: int, complex: Literal[False] = ...) -> _PointsDerivate: ...
@overload
def jvp(v: NDArray, z: _ComplexNumber | NDArray, n: Literal[1] = ...) -> NDArray: ...
@overload
def jvp(v: NDArray, z: _ComplexNumber | NDArray, n: int) -> NDArray: ...
@overload
def jvp(v: DecimalNumber | NDArray, z: NDArray, n: Literal[1] = ...) -> NDArray: ...
@overload
def jvp(v: DecimalNumber | NDArray, z: NDArray, n: int) -> NDArray: ...
@overload
def jvp(v: DecimalNumber, z: _ComplexNumber, n: Literal[1] = ...) -> DecimalNumber: ...
@overload
def jvp(v: DecimalNumber, z: _ComplexNumber, n: int) -> DecimalNumber: ...
@overload
def yvp(v: NDArray, z: DecimalNumber | NDArray, n: int = ...) -> NDArray: ...
@overload
def yvp(v: DecimalNumber | NDArray, z: NDArray, n: int = ...) -> NDArray: ...
@overload
def yvp(v: DecimalNumber, z: DecimalNumber, n: int = ...) -> DecimalNumber: ...
@overload
def kvp(v: DecimalNumber, z: _ComplexNumber, n: int = 1) -> DecimalNumber: ...
@overload
def kvp(v: NDArray, z: NDArray | _ComplexNumber, n: int = 1) -> NDArray: ...
@overload
def kvp(v: NDArray | DecimalNumber, z: NDArray, n: int = 1) -> NDArray: ...
@overload
def ivp(v: NDArray, z: DecimalNumber | NDArray, n: int = ...) -> NDArray: ...
@overload
def ivp(v: DecimalNumber | NDArray, z: NDArray, n: int = ...) -> NDArray: ...
@overload
def ivp(v: DecimalNumber, z: DecimalNumber, n: int = ...) -> DecimalNumber: ...
@overload
def h1vp(v: NDArray, z: DecimalNumber | NDArray, n: int = ...) -> NDArray: ...
@overload
def h1vp(v: DecimalNumber | NDArray, z: NDArray, n: int = ...) -> NDArray: ...
@overload
def h1vp(v: DecimalNumber, z: DecimalNumber, n: int = ...) -> DecimalNumber: ...
@overload
def h2vp(v: NDArray, z: DecimalNumber | NDArray, n: int = ...) -> NDArray: ...
@overload
def h2vp(v: DecimalNumber | NDArray, z: NDArray, n: int = ...) -> NDArray: ...
@overload
def h2vp(v: DecimalNumber, z: DecimalNumber, n: int = ...) -> DecimalNumber: ...
def riccati_jn(n: int, x: float) -> _PointsDerivate: ...
def riccati_yn(n: int, x: float) -> _PointsDerivate: ...
def erf_zeros(nt: int) -> NDArray: ...
def fresnelc_zeros(nt: int) -> NDArray: ...
def fresnels_zeros(nt: int) -> NDArray: ...
def fresnel_zeros(nt: int) -> _PointsDerivate: ...
@overload
def assoc_laguerre(x: NDArray, n: int, k: float = ...) -> NDArray: ...
@overload
def assoc_laguerre(x: DecimalNumber, n: int, k: float = ...) -> DecimalNumber: ...
def polygamma(n: int, x: NDArray) -> NDArray: ...
def mathieu_even_coef(m: int, q: DecimalNumber) -> NDArray: ...
def mathieu_odd_coef(m: int, q: DecimalNumber) -> NDArray: ...
def lpmn(m: DecimalNumber, n: DecimalNumber, z: DecimalNumber) -> _PointsDerivate: ...
def clpmn(
    m: DecimalNumber, n: DecimalNumber, z: _ComplexNumber, type: Literal[2, 3] = ...
) -> _PointsDerivate: ...
def lqmn(m: IntNumber, n: IntNumber, z: DecimalNumber) -> _PointsDerivate: ...
def bernoulli(n: int) -> NDArray: ...
def euler(n: int) -> NDArray: ...
def lpn(n: int, z: DecimalNumber) -> _PointsDerivate: ...
def lqn(n: int, z: DecimalNumber) -> _PointsDerivate: ...
def ai_zeros(nt: int) -> _ZerosOrder: ...
def bi_zeros(nt: int) -> _ZerosOrder: ...
def lmbda(v: int, x: int) -> _PointsDerivate: ...
def pbdv_seq(v: DecimalNumber, x: DecimalNumber) -> _PointsDerivate: ...
def pbvv_seq(v: DecimalNumber, x: DecimalNumber) -> _PointsDerivate: ...
def pbdn_seq(n: int, z: _ComplexNumber) -> _PointsDerivate: ...
def ber_zeros(nt: int) -> NDArray: ...
def bei_zeros(nt: int) -> NDArray: ...
def ker_zeros(nt: int) -> NDArray: ...
def kei_zeros(nt: int) -> NDArray: ...
def berp_zeros(nt: int) -> NDArray: ...
def beip_zeros(nt: int) -> NDArray: ...
def kerp_zeros(nt: int) -> NDArray: ...
def keip_zeros(nt: int) -> NDArray: ...
def kelvin_zeros(
    nt: int,
) -> tuple[
    NDArray,
    NDArray,
    NDArray,
    NDArray,
    NDArray,
    NDArray,
    NDArray,
    NDArray,
]: ...
def pro_cv_seq(m: IntNumber, n: IntNumber, c: DecimalNumber) -> NDArray: ...
def obl_cv_seq(m: IntNumber, n: IntNumber, c: DecimalNumber) -> NDArray: ...
@overload
def comb(
    N: NDArray,
    k: NDArray,
    *,
    exact: bool = ...,
    repetition: bool = ...,
    legacy: bool = ...,
) -> NDArray: ...
@overload
def comb(
    N: DecimalNumber,
    k: DecimalNumber,
    *,
    exact: bool = ...,
    repetition: bool = ...,
    legacy: bool = ...,
) -> DecimalNumber: ...
@overload
def perm(N: IntNumber, k: IntNumber, exact: bool = ...) -> IntNumber: ...
@overload
def perm(N: NDArray, k: NDArray, exact: bool = ...) -> NDArray: ...
@overload
def factorial(n: NDArray, exact: bool = ...) -> NDArray: ...
@overload
def factorial(n: DecimalNumber, exact: bool = ...) -> DecimalNumber: ...
@overload
def factorial2(n: NDArray, exact: bool = ...) -> NDArray: ...
@overload
def factorial2(n: IntNumber, exact: bool = ...) -> DecimalNumber: ...
@overload
def factorialk(n: IntNumber, k: int, exact: bool = ...) -> DecimalNumber: ...
@overload
def factorialk(n: NDArray, k: int, exact: bool = ...) -> NDArray: ...
def stirling2(N: NDArray, K: NDArray, *, exact: bool = ...) -> NDArray: ...
@overload
def zeta(
    x: DecimalNumber, q: DecimalNumber | None = ..., out: None = ...
) -> DecimalNumber: ...
@overload
def zeta(
    x: NDArray, q: NDArray | DecimalNumber | None = ..., out: None = ...
) -> NDArray: ...
@overload
def zeta(x: NDArray | DecimalNumber, q: NDArray, out: None = ...) -> NDArray: ...
@overload
def zeta(
    x: DecimalNumber | NDArray,
    q: NDArray | DecimalNumber | None,
    out: NDArray,
) -> None: ...

# Those are private methods
def _factorialx_approx_core(n: NDArray, k: int) -> NDArray: ...
def _factorialx_array_approx(n: NDArray, k: int) -> NDArray: ...
def _factorialx_array_exact(n: NDArray, k: int = ...) -> NDArray: ...
def _range_prod(lo: IntNumber, hi: IntNumber, k: IntNumber = 1) -> IntNumber: ...
def _nonneg_int_or_fail(n: IntNumber, var_name: str, strict: bool = ...) -> int: ...
@overload
def _bessel_diff_formula(
    v: NDArray,
    z: NDArray | DecimalNumber,
    n: int,
    L: Callable[[NDArray, DecimalNumber], NDArray],
    phase: int,
) -> NDArray: ...
@overload
def _bessel_diff_formula(
    v: DecimalNumber | NDArray,
    z: NDArray,
    n: int,
    L: Callable[[NDArray, DecimalNumber], NDArray],
    phase: int,
) -> NDArray: ...
@overload
def _bessel_diff_formula(
    v: DecimalNumber,
    z: DecimalNumber,
    n: int,
    L: Callable[[NDArray, DecimalNumber], NDArray],
    phase: int,
) -> DecimalNumber: ...
